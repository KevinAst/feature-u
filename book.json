{ 
  "gitbook":     "3.2.2",
  "root":        "./docs",
  "title":       "feature-u",
  "description": "Feature Based Project Organization for React",
  "author":      "Kevin J. Bridges <kevinast@gmail.com> (https://github.com/KevinAst)",
  "structure": { 
    "readme":  "intro.md",
    "summary": "toc.md" 
  },
  "plugins": ["-livereload", "toolbar"],
  "pluginsConfig": {
    "sharing": {
      "facebook":   false,
      "twitter":    false,
      "google":     false,
      "weibo":      false,
      "instapaper": false,
      "vk":         false,
      "all": ["twitter", "facebook", "google"]
    },
    "toolbar": {
        "buttons": [
          {
            "label": "GitHub",
            "icon": "fa fa-github",
            "url": "https://github.com/KevinAst/feature-u"
          },
          {
            "label": "NPM",
            "icon": "fa fa-bullseye",
            "url": "https://www.npmjs.com/package/feature-u"
          }
        ]
    }
  },
  "variables": { 

    "guide": {

      "devGuide":                 "[**Dev Guide**](/index.html)",

      "start":                    "[`Getting Started`](/start.md)",
      "start_polyfill":           "[`Potential Need for Polyfills`](/start.md#potential-need-for-polyfills)",

      "basicConcepts":            "[`Basic Concepts`](/concepts.md)",

      "benefits":                 "[`Benefits`](/benefits.md)",

      "usage":                    "[`Usage`](/usage.md)",
      "usage_dir":                "[`Directory Structure`](/usage.md#directory-structure)",
      "usage_featureObject":      "[`Feature Object`](/usage.md#feature-object)",
      "usage_launchapp":          "[`launchApp()`](/usage.md#launchapp)",
      "usage_realExample":        "[`Real Example`](/usage.md#real-example)",

      "detail":                   "[`A Closer Look`](/detail.md)",
      "detail_aspects":           "[`aspects`](/detail.md#aspects)",
      "detail_featureAndAspect":  "[`Feature & aspect content`](/detail.md#feature-object-relaying-aspect-content)",
      "detail_builtInAspects":    "[`Built-In aspects`](/detail.md#built-in-aspects)",
      "detail_extendableAspects": "[`Extendable aspects`](/detail.md#extendable-aspects)",
      "detail_launchingApp":      "[`Launching Your Application`](/detail.md#launching-your-application)",
      "detail_reactRegistration": "[`React Registration`](/detail.md#react-registration)",
      "detail_appObject":         "[`App Object`](/detail.md#app-object)",
      "detail_featurePublicAPI":  "[`Feature Public API`](/detail.md#feature-public-api)",
      "detail_doesFeatureExist":  "[`Does Feature Exist`](/detail.md#does-feature-exist)",

      "appLifeCycle":             "[`Application Life Cycle Hook`](/appLifeCycle.md)",

      "appWillStart":             "[`appWillStart`](/appLifeCycle.md#appwillstart)",
      "appWillStartCB":           "[`Feature.appWillStart()`](/appLifeCycle.md#appwillstart)",
      "appWillStartCB$":          "[`Feature.appWillStart({app, curRootAppElm}): rootAppElm || falsy`](/appLifeCycle.md#appwillstart)",

      "appDidStart":              "[`appDidStart`](/appLifeCycle.md#appDidStart)",
      "appDidStartCB":            "[`Feature.appDidStart()`](/appLifeCycle.md#appDidStart)",
      "appDidStartCB$":           "[`Feature.appDidStart({app, [appState], [dispatch]}): void`](/appLifeCycle.md#appDidStart)",

      "crossCom":                 "[`Cross Feature Communication`](/crossCommunication.md)",
      "crossCom_publicFaceApp":   "[`publicFace and the App Object`](/crossCommunication.md#publicface-and-the-app-object)",
      "crossCom_publicFace":      "[`publicFace`](/crossCommunication.md#publicface-and-the-app-object)",
      "crossCom_accessingApp":    "[`Accessing App`](/crossCommunication.md#accessing-the-app-object)",
      "crossCom_managedCodeExpansion": "[`Managed Code Expansion`](/crossCommunication.md#managed-code-expansion)",
      "crossCom_appAccessSummary":     "[`App Access Summary`](/crossCommunication.md#app-access-summary)",

      "featureRouter":            "[`Feature Based Routes`](/featureRouter.md)",

      "enablement":               "[`Feature Enablement`](/enablement.md)",

      "bestPractices":             "[`Best Practices`](/bestPractices.md)",
      "bestPractices_featureName": "[`Feature Name`](/bestPractices.md#feature-name)",

      "coreApi":                  "[`Core API`](/coreApi.md)",

      "extending":                           "[`Extending feature-u`](/extending.md)",
      "extending_locatingExtensions":        "[`Locating Extensions`](/extending.md#locating-extensions)",
      "extending_aspectObject":              "[`Aspect Object`](/extending.md#aspect-object-extending-feature-u)",
      "extending_definingAppElm":            "[`Defining rootAppElm`](/extending.md#defining-rootappelm)",
      "extending_aspectCrossCommunication":  "[`Aspect Cross Communication`](/extending.md#aspect-cross-communication)",
      "extending_aspectLifeCycleMethods":    "[`Aspect Life Cycle Methods`](/extending.md#aspect-life-cycle-methods)",

        "genesisMeth":                   "[`Aspect.genesis()`](/extending.md#aspectgenesis)",
        "genesisMeth$":                  "[`Aspect.genesis(): string`](/extending.md#aspectgenesis)",

        "expandFeatureContentMeth":      "[`Aspect.expandFeatureContent()`](/extending.md#aspectexpandfeaturecontent)",
        "expandFeatureContentMeth$":     "[`Aspect.expandFeatureContent(app, feature): string`](/extending.md#aspectexpandfeaturecontent)",

        "validateFeatureContentMeth":    "[`Aspect.validateFeatureContent()`](/extending.md#aspectvalidatefeaturecontent)",
        "validateFeatureContentMeth$":   "[`Aspect.validateFeatureContent(feature): string`](/extending.md#aspectvalidatefeaturecontent)",

        "assembleFeatureContentMeth":    "[`Aspect.assembleFeatureContent()`](/extending.md#aspectassemblefeaturecontent)",
        "assembleFeatureContentMeth$":   "[`Aspect.assembleFeatureContent(app, activeFeatures): void`](/extending.md#aspectassemblefeaturecontent)",

        "assembleAspectResourcesMeth":   "[`Aspect.assembleAspectResources()`](/extending.md#aspectassembleaspectresources)",
        "assembleAspectResourcesMeth$":  "[`Aspect.assembleAspectResources(app, aspects): void`](/extending.md#aspectassembleaspectresources)",

        "initialRootAppElmMeth":         "[`Aspect.initialRootAppElm()`](/extending.md#aspectinitialrootappelm)",
        "initialRootAppElmMeth$":        "[`Aspect.initialRootAppElm(app, curRootAppElm): rootAppElm`](/extending.md#aspectinitialrootappelm)",

        "injectRootAppElmMeth":          "[`Aspect.injectRootAppElm()`](/extending.md#aspectinjectrootappelm)",
        "injectRootAppElmMeth$":         "[`Aspect.injectRootAppElm(app, curRootAppElm): rootAppElm`](/extending.md#aspectinjectrootappelm)",

        "additionalMethods":             "[`Aspect.additionalMethods()`](/extending.md#aspectadditionalmethods)",

        "aspectConfig":                  "[`Aspect.config`](/extending.md#aspectconfig)",

      "extensionApi":                        "[`Extension API`](/extensionApi.md)",

      "dist":                   "[`Distribution`](/dist.md)",
      "why":                    "[`Why feature-u?`](/why.md)",
      "history":                "[`Revision History`](/history.md)",
      "LICENSE":                "[`MIT License`](/LICENSE.md)"
    },

    "api": {

      "Feature":           "<a href='/api.html#Feature'><code>Feature</code></a>",
      "Features":          "[`Features`](/api.md#Feature)",
      "App":               "[`App`](/api.md#App)",
      "Fassets":           "[`Fassets`](/api.md#Fassets)",
      "Fassets_get":       "[`Fassets.get()`](/api.md#Fassets_get)",
      "Fassets_isFeature": "[`Fassets.isFeature()`](/api.md#Fassets_isFeature)",
      "Aspect":            "[`Aspect`](/api.md#Aspect)",
      "Aspects":           "[`Aspects`](/api.md#Aspect)",
      "AspectContent":     "[`AspectContent`](/api.md#AspectContent)",

      "coreApi":                    "[`Core API`](/coreApi.md)",
        "createFeature":            "[`createFeature()`](/api.md#createFeature)",
        "createFeature$":           "[`createFeature({name, [enabled], [publicFace], [appWillStart], [appDidStart], [pluggableAspects]}): Feature`](/api.md#createFeature)",
          "appWillStartCB":         "[`appWillStart()`](/api.md#appWillStartCB)",
          "appWillStartCB$":        "[`appWillStart({app, curRootAppElm}): rootAppElm || falsy`](/api.md#appWillStartCB)",
          "appDidStartCB":          "[`appDidStart()`](/api.md#appDidStartCB)",
          "appDidStartCB$":         "[`appDidStart({app, [appState], [dispatch]}): void`](/api.md#appDidStartCB)",
        "launchApp":                "[`launchApp()`](/api.md#launchApp)",
        "launchApp$":               "[`launchApp({[aspects], features, registerRootAppElm}): App`](/api.md#launchApp)",
          "registerRootAppElmCB":   "[`registerRootAppElm()`](/api.md#registerRootAppElmCB)",
          "registerRootAppElmCB$":  "[`registerRootAppElm(rootAppElm): void`](/api.md#registerRootAppElmCB)",
        "withFassets":              "[`withFassets()`](/api.md#withFassets)",
        "withFassets$":             "[`withFassets({mapFassetsToProps}): HoC`](/api.md#withFassets)",
          "mapFassetsToPropsStruct":  "[`mapFassetsToPropsStruct`](/api.md#mapFassetsToPropsStruct)",
          "mapFassetsToPropsFn":      "[`mapFassetsToPropsFn`](/api.md#mapFassetsToPropsFn)",
        "managedExpansion":         "[`managedExpansion()`](/api.md#managedExpansion)",
        "managedExpansion$":        "[`managedExpansion(managedExpansionCB): managedExpansionCB`](/api.md#managedExpansion)",
          "managedExpansionCB":     "[`managedExpansionCB()`](/api.md#managedExpansionCB)",
          "managedExpansionCB$":    "[`managedExpansionCB(app): AspectContent`](/api.md#managedExpansionCB)",

      "extensionApi":                      "[`Extension API`](/extensionApi.md)",
        "createAspect":                    "[`createAspect()`](/api.md#createAspect)",
        "createAspect$":                   "[`createAspect({see-docs}): Aspect`](/api.md#createAspect)",

          "genesisMeth":                   "[`genesis()`](/api.md#genesisMeth)",
          "genesisMeth$":                  "[`genesis(): string`](/api.md#genesisMeth)",

          "expandFeatureContentMeth":      "[`expandFeatureContent()`](/api.md#expandFeatureContentMeth)",
          "expandFeatureContentMeth$":     "[`expandFeatureContent(app, feature): string`](/api.md#expandFeatureContentMeth)",

          "validateFeatureContentMeth":    "[`validateFeatureContent()`](/api.md#validateFeatureContentMeth)",
          "validateFeatureContentMeth$":   "[`validateFeatureContent(feature): string`](/api.md#validateFeatureContentMeth)",

          "assembleFeatureContentMeth":    "[`assembleFeatureContent()`](/api.md#assembleFeatureContentMeth)",
          "assembleFeatureContentMeth$":   "[`assembleFeatureContent(app, activeFeatures): void`](/api.md#assembleFeatureContentMeth)",

          "assembleAspectResourcesMeth":   "[`assembleAspectResources()`](/api.md#assembleAspectResourcesMeth)",
          "assembleAspectResourcesMeth$":  "[`assembleAspectResources(app, aspects): void`](/api.md#assembleAspectResourcesMeth)",

          "initialRootAppElmMeth":         "[`initialRootAppElm()`](/api.md#initialRootAppElmMeth)",
          "initialRootAppElmMeth$":        "[`initialRootAppElm(app, curRootAppElm): rootAppElm`](/api.md#initialRootAppElmMeth)",

          "injectRootAppElmMeth":          "[`injectRootAppElm()`](/api.md#injectRootAppElmMeth)",
          "injectRootAppElmMeth$":         "[`injectRootAppElm(app, curRootAppElm): rootAppElm`](/api.md#injectRootAppElmMeth)",

        "extendAspectProperty":            "[`extendAspectProperty()`](/api.md#extendAspectProperty)",
        "extendAspectProperty$":           "[`extendAspectProperty(name, owner): void`](/api.md#extendAspectProperty)",

        "extendFeatureProperty":           "[`extendFeatureProperty()`](/api.md#extendFeatureProperty)",
        "extendFeatureProperty$":          "[`extendFeatureProperty(name, owner): void`](/api.md#extendFeatureProperty)"
    },

    "ext": {
      "actionU":           "[`action-u`](https://action-u.js.org/)",
      "astxReduxUtil":     "[`astx-redux-util`](https://astx-redux-util.js.org/)",
      "eateryNod":         "[`eatery-nod`](https://github.com/KevinAst/eatery-nod)",
      "expo":              "[`expo`](https://expo.io/)",
      "featureRedux":      "[`feature-redux`](https://github.com/KevinAst/feature-redux)",
      "featureReduxLogic": "[`feature-redux-logic`](https://github.com/KevinAst/feature-redux-logic)",
      "featureRouter":     "[`feature-router`](https://github.com/KevinAst/feature-router)",
      "react":             "[`react`](https://reactjs.org/)",
      "reactNative":       "[`react-native`](https://facebook.github.io/react-native/)",
      "reactRouter":       "[`react-router`](https://reacttraining.com/react-router/)",
      "redux":             "[`redux`](http://redux.js.org/)",
      "reduxMiddleware":   "[`redux middleware`](https://redux.js.org/docs/advanced/Middleware.html)",
      "reduxActions":      "[`redux-actions`](https://www.npmjs.com/package/redux-actions)",
      "reduxLogic":        "[`redux-logic`](https://github.com/jeffbski/redux-logic)",
      "jeffbski":          "[`@jeffbski`](https://github.com/jeffbski)"
    }
  }
}
